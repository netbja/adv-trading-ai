# üê≥ DOCKER SETUP COMPLET - VOLUMES AVEC VARIABLES + NGINX CORRIG√â
version: '3.8'

services:
  # üåê NGINX REVERSE PROXY + FRONTEND
  nginx:
    image: nginx:alpine
    container_name: trading_ai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/frontend:/usr/share/nginx/html:ro
      - ./configs/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      # Ajouter htpasswd depuis le container
      - ./configs/nginx/.htpasswd:/etc/nginx/.htpasswd:ro
    depends_on:
      - grafana
      - n8n
    networks:
      - trading_network
    restart: unless-stopped
    # Cr√©er htpasswd dans le container nginx
    command: >
      sh -c "
        apk add --no-cache apache2-utils &&
        if [ ! -f /etc/nginx/.htpasswd ]; then
          echo 'admin:' > /etc/nginx/.htpasswd &&
          echo 'PrometheusAdmin2025!' | htpasswd -i /etc/nginx/.htpasswd admin
        fi &&
        nginx -g 'daemon off;'
      "

  # üìä GRAFANA - MONITORING DASHBOARDS
  grafana:
    image: grafana/grafana:latest
    container_name: trading_ai_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD:-TradingAI2025!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_SECRET_KEY=${GF_SECRET_KEY:-your-secret-key-here}
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./logs/grafana:/var/log/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - trading_network
    restart: unless-stopped
    user: "472:472"  # Grafana user
    depends_on:
      - postgres

# üóÉÔ∏è POSTGRESQL - BASE DE DONN√âES PRINCIPALE
  postgres:
    image: postgres:15-alpine
    container_name: trading_ai_postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-trading_ai}
      - POSTGRES_USER=${POSTGRES_USER:-trader}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-TradingDB2025!}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup/postgres:/backup
      - ./logs/postgres:/var/log/postgresql
    networks:
      - trading_network
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    # ‚úÖ HEALTHCHECK CRITIQUE pour que N8N attende
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER:-trader} -d ${POSTGRES_DB:-trading_ai}']
      interval: 5s
      timeout: 5s
      retries: 10
    # Configuration optimis√©e
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c default_statistics_target=100
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=all
      -c log_min_duration_statement=1000
      -c logging_collector=on
      -c log_destination=stderr

  # üîß N8N - WORKFLOW AUTOMATION
  n8n:
    image: n8nio/n8n:latest
    container_name: trading_ai_n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-TradingN8N2025!}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      # ‚úÖ M√äME DB QUE POSTGRES (comme l'exemple officiel)
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-trading_ai}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-trader}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-TradingDB2025!}
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
    volumes:
      - ./data/n8n:/home/node/.n8n
      - ./logs/n8n:/var/log/n8n
      - ./configs/n8n/custom-nodes:/home/node/.n8n/custom:ro
    networks:
      - trading_network
    restart: unless-stopped
    # ‚úÖ ATTENDRE QUE POSTGRES SOIT HEALTHY
    depends_on:
      postgres:
        condition: service_healthy

  # üß† AI ORCHESTRATOR - INTELLIGENT CRON REPLACEMENT
  ai_orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.orchestrator
    container_name: trading_ai_orchestrator
    environment:
      # AI Configuration
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # N8N Integration
      - N8N_USER=${N8N_USER:-admin}
      - N8N_PASSWORD=${N8N_PASSWORD:-TradingN8N2025!}
      
      # Database
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-trading_ai}
      - POSTGRES_USER=${POSTGRES_USER:-trader}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-TradingDB2025!}
      
      # API Configuration
      - ORCHESTRATOR_PORT=8080
      
      # Telegram (optional)
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID:-}
      
      # Trading APIs
      - TRADERMADE_API_KEY=${TRADERMADE_API_KEY:-demo}
      - BIRDEYE_API_KEY=${BIRDEYE_API_KEY:-}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
    volumes:
      - ./logs/orchestrator:/app/logs
      - ./data/orchestrator:/app/data
    ports:
      - "${ORCHESTRATOR_PORT:-8080}:8080"
    networks:
      - trading_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      n8n:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üìà PROMETHEUS - M√âTRIQUES SYST√àME
  prometheus:
    image: prom/prometheus:latest
    container_name: trading_ai_prometheus
    volumes:
      - ./data/prometheus:/prometheus
      - ./configs/prometheus:/etc/prometheus
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - trading_network
    restart: unless-stopped

  # üìä NODE EXPORTER - M√âTRIQUES SYST√àME
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: trading_ai_node_exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - trading_network
    restart: unless-stopped

  # üö® ALERTMANAGER - GESTION ALERTES
  alertmanager:
    image: prom/alertmanager:latest
    container_name: trading_ai_alertmanager
    volumes:
      - ./data/alertmanager:/alertmanager
      - ./configs/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - trading_network
    restart: unless-stopped

  # üìã LOKI - CENTRALISATION LOGS (CORRIG√â INDENTATION)
  loki:
    image: grafana/loki:latest
    container_name: trading_ai_loki
    volumes:
      - ./configs/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - ./data/loki/chunks:/loki/chunks
      - ./data/loki/rules:/loki/rules
      - ./data/loki/tsdb-compactor:/loki/tsdb-compactor
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - trading_network
    restart: unless-stopped

  # üì¶ PROMTAIL - COLLECTEUR LOGS (CORRIG√â INDENTATION)
  promtail:
    image: grafana/promtail:latest
    container_name: trading_ai_promtail
    volumes:
      - ./configs/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - ./logs/grafana:/var/log/grafana:ro
      - ./logs/postgres:/var/log/postgresql:ro
      - ./logs/n8n:/var/log/n8n:ro
      - ./logs/nginx:/var/log/nginx:ro
      - ./logs/orchestrator:/var/log/orchestrator:ro  # Logs orchestrateur
    command: -config.file=/etc/promtail/config.yml
    networks:
      - trading_network
    restart: unless-stopped

  # üîÑ BACKUP SERVICE (CORRIG√â INDENTATION)
  backup:
    image: postgres:15-alpine
    container_name: trading_ai_backup
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trading_ai}
      POSTGRES_USER: ${POSTGRES_USER:-trader}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-TradingDB2025!}
      PGPASSWORD: ${POSTGRES_PASSWORD:-TradingDB2025!}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION:-7}
    volumes:
      - ./backup/postgres:/backup
      - ./scripts/backup:/scripts:ro
    networks:
      - trading_network
    restart: "no"
    entrypoint: ["/bin/sh", "/scripts/backup.sh"]

# üåê R√âSEAUX
networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}

# üíæ VOLUMES
volumes:
  postgres_data:
    driver: local
