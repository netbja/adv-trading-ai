"""
üß† DECISION ENGINE - MOTEUR DE D√âCISION IA
Analyse intelligente et recommandations de t√¢ches
"""

import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
from enum import Enum
import numpy as np
from sqlalchemy.orm import Session

# Imports corrects pour la structure dans le container Docker
from app.database.connection import get_db
from models.market import MarketData
from models.system import SystemHealth
from utils.logger import get_logger

logger = get_logger(__name__)

class Priority(Enum):
    CRITICAL = 1
    HIGH = 2 
    MEDIUM = 3
    LOW = 4

class TaskType(Enum):
    # Workflows g√©n√©riques
    MARKET_ANALYSIS = "market_analysis"
    SYSTEM_HEALTH = "system_health"
    DATA_SYNC = "data_sync"
    AI_LEARNING = "ai_learning"
    RISK_ASSESSMENT = "risk_assessment"
    
    # ü™ô MEME COINS WORKFLOW
    MEME_ANALYSIS = "meme_analysis"
    MEME_TRADING = "meme_trading"
    MEME_MONITORING = "meme_monitoring"
    
    # ‚Çø CRYPTO LONG TERME WORKFLOW  
    CRYPTO_LT_ANALYSIS = "crypto_lt_analysis"
    CRYPTO_LT_TRADING = "crypto_lt_trading"
    CRYPTO_LT_REBALANCING = "crypto_lt_rebalancing"
    
    # üí± FOREX WORKFLOW
    FOREX_ANALYSIS = "forex_analysis"
    FOREX_TRADING = "forex_trading"
    FOREX_CORRELATION = "forex_correlation"
    
    # üìà ETF WORKFLOW (existant, am√©lior√©)
    ETF_ANALYSIS = "etf_analysis"
    ETF_TRADING = "etf_trading"
    ETF_REBALANCING = "etf_rebalancing"
    
    # Workflows g√©n√©riques legacy (compatibilit√©)
    TRADING_EXECUTION = "trading_execution"

class AssetType(Enum):
    """Types d'assets support√©s"""
    MEME_COINS = "meme_coins"
    CRYPTO_LT = "crypto_lt" 
    FOREX = "forex"
    ETF = "etf"

@dataclass
class MarketCondition:
    volatility: float
    trend_strength: float
    volume_ratio: float
    sentiment_score: float
    news_impact: float
    timestamp: datetime

@dataclass
class SystemStatus:
    cpu_usage: float
    memory_usage: float
    disk_usage: float
    active_connections: int
    error_rate: float
    response_time: float

@dataclass
class TaskRecommendation:
    task_type: TaskType
    priority: Priority
    frequency_minutes: int
    reason: str
    confidence: float
    parameters: Dict

class DecisionEngine:
    """
    üß† Moteur de d√©cision intelligent de l'orchestrateur
    
    Analyse les conditions de march√©, l'√©tat du syst√®me et les performances
    pour d√©cider intelligemment quand et comment ex√©cuter les t√¢ches.
    """
    
    def __init__(self):
        self.market_threshold_high_volatility = 0.7
        self.market_threshold_strong_trend = 0.6
        self.system_threshold_high_load = 0.8
        self.min_confidence_threshold = 0.6
        
    async def analyze_current_conditions(self) -> Tuple[MarketCondition, SystemStatus]:
        """Analyse les conditions actuelles du march√© et du syst√®me"""
        
        market_condition = await self._analyze_market_conditions()
        system_status = await self._analyze_system_status()
        
        logger.info(f"üîç Conditions analys√©es - Volatilit√©: {market_condition.volatility:.2f}, "
                   f"CPU: {system_status.cpu_usage:.1f}%")
        
        return market_condition, system_status

    async def generate_recommendations(self, 
                                     market_condition: MarketCondition, 
                                     system_status: SystemStatus) -> List[TaskRecommendation]:
        """G√©n√®re des recommandations intelligentes de t√¢ches"""
        
        recommendations = []
        
        # üî• LOGIQUE DE PRIORISATION INTELLIGENTE
        
        # 1. Analyse de march√© haute priorit√© si volatilit√© √©lev√©e
        if market_condition.volatility > self.market_threshold_high_volatility:
            recommendations.append(TaskRecommendation(
                task_type=TaskType.MARKET_ANALYSIS,
                priority=Priority.HIGH,
                frequency_minutes=2,  # Plus fr√©quent
                reason=f"Volatilit√© √©lev√©e d√©tect√©e: {market_condition.volatility:.2f}",
                confidence=0.9,
                parameters={"deep_analysis": True, "risk_mode": "conservative"}
            ))
        else:
            recommendations.append(TaskRecommendation(
                task_type=TaskType.MARKET_ANALYSIS,
                priority=Priority.MEDIUM,
                frequency_minutes=5,  # Normal
                reason="Conditions de march√© normales",
                confidence=0.7,
                parameters={"deep_analysis": False}
            ))

        # 2. Trading plus agressif si tendance forte
        if market_condition.trend_strength > self.market_threshold_strong_trend:
            recommendations.append(TaskRecommendation(
                task_type=TaskType.TRADING_EXECUTION,
                priority=Priority.HIGH,
                frequency_minutes=3,
                reason=f"Tendance forte d√©tect√©e: {market_condition.trend_strength:.2f}",
                confidence=0.85,
                parameters={"position_size_multiplier": 1.2, "risk_tolerance": "medium"}
            ))

        # 3. Surveillance syst√®me renforc√©e si charge √©lev√©e
        if system_status.cpu_usage > self.system_threshold_high_load * 100:
            recommendations.append(TaskRecommendation(
                task_type=TaskType.SYSTEM_HEALTH,
                priority=Priority.CRITICAL,
                frequency_minutes=1,
                reason=f"Charge syst√®me √©lev√©e: {system_status.cpu_usage:.1f}%",
                confidence=0.95,
                parameters={"auto_healing": True, "resource_optimization": True}
            ))
        else:
            recommendations.append(TaskRecommendation(
                task_type=TaskType.SYSTEM_HEALTH,
                priority=Priority.LOW,
                frequency_minutes=10,
                reason="Syst√®me stable",
                confidence=0.8,
                parameters={}
            ))

        # 4. Synchronisation donn√©es adaptative
        sync_frequency = self._calculate_sync_frequency(market_condition, system_status)
        recommendations.append(TaskRecommendation(
            task_type=TaskType.DATA_SYNC,
            priority=Priority.MEDIUM,
            frequency_minutes=sync_frequency,
            reason=f"Fr√©quence adapt√©e aux conditions (vol: {market_condition.volatility:.2f})",
            confidence=0.75,
            parameters={"batch_size": "auto"}
        ))

        # 5. Apprentissage IA en p√©riode calme
        if (market_condition.volatility < 0.3 and 
            system_status.cpu_usage < 50):
            recommendations.append(TaskRecommendation(
                task_type=TaskType.AI_LEARNING,
                priority=Priority.LOW,
                frequency_minutes=30,
                reason="P√©riode calme - optimisation des mod√®les",
                confidence=0.6,
                parameters={"model_types": ["technical_analysis", "sentiment"], "epochs": 10}
            ))

        # üöÄ NOUVEAUX WORKFLOWS MULTI-ASSETS
        
        # ü™ô MEME COINS WORKFLOW - Trading haute fr√©quence
        if market_condition.volatility > 0.8:  # Memes adorent la volatilit√© !
            recommendations.extend([
                TaskRecommendation(
                    task_type=TaskType.MEME_ANALYSIS,
                    priority=Priority.HIGH,
                    frequency_minutes=1,  # Tr√®s fr√©quent !
                    reason=f"Volatilit√© extr√™me parfaite pour memes: {market_condition.volatility:.2f}",
                    confidence=0.85,
                    parameters={"scan_reddit": True, "twitter_sentiment": True, "pump_detection": True}
                ),
                TaskRecommendation(
                    task_type=TaskType.MEME_TRADING,
                    priority=Priority.HIGH,
                    frequency_minutes=2,
                    reason="Conditions volatiles id√©ales pour swing trading memes",
                    confidence=0.8,
                    parameters={"max_position_size": 0.05, "stop_loss": 0.15, "take_profit": 0.3}
                )
            ])
        
        # ‚Çø CRYPTO LONG TERME WORKFLOW - Accumulation intelligente
        if market_condition.volatility < 0.4:  # P√©riodes calmes = accumulation
            recommendations.extend([
                TaskRecommendation(
                    task_type=TaskType.CRYPTO_LT_ANALYSIS,
                    priority=Priority.MEDIUM,
                    frequency_minutes=60,  # Horizon long terme
                    reason="P√©riode calme id√©ale pour analyse long terme",
                    confidence=0.75,
                    parameters={"assets": ["BTC", "ETH", "SOL"], "timeframe": "1d", "dca_analysis": True}
                ),
                TaskRecommendation(
                    task_type=TaskType.CRYPTO_LT_REBALANCING,
                    priority=Priority.LOW,
                    frequency_minutes=720,  # 12h - rebalancing lent
                    reason="Rebalancing portefeuille crypto LT",
                    confidence=0.7,
                    parameters={"target_allocation": {"BTC": 0.5, "ETH": 0.3, "SOL": 0.2}}
                )
            ])

        # üí± FOREX WORKFLOW - Trading des paires majeures
        if 8 <= datetime.utcnow().hour <= 17:  # Sessions de trading actives
            recommendations.extend([
                TaskRecommendation(
                    task_type=TaskType.FOREX_ANALYSIS,
                    priority=Priority.MEDIUM,
                    frequency_minutes=15,
                    reason="Session de trading forex active",
                    confidence=0.8,
                    parameters={"pairs": ["EURUSD", "GBPUSD", "USDJPY"], "correlation_analysis": True}
                ),
                TaskRecommendation(
                    task_type=TaskType.FOREX_TRADING,
                    priority=Priority.MEDIUM,
                    frequency_minutes=30,
                    reason="Trading forex pendant session active",
                    confidence=0.75,
                    parameters={"max_leverage": 30, "risk_per_trade": 0.02}
                )
            ])

        # üìà ETF WORKFLOW - Investissement syst√©matique 
        recommendations.extend([
            TaskRecommendation(
                task_type=TaskType.ETF_ANALYSIS,
                priority=Priority.MEDIUM,
                frequency_minutes=60,  # Analyse horaire
                reason="Analyse ETF syst√©matique pour investissement LT",
                confidence=0.8,
                parameters={"etfs": ["VTI", "QQQ", "VXUS", "BND"], "fundamental_analysis": True}
            ),
            TaskRecommendation(
                task_type=TaskType.ETF_REBALANCING,
                priority=Priority.LOW,
                frequency_minutes=1440,  # Daily rebalancing
                reason="Rebalancing quotidien portefeuille ETF",
                confidence=0.9,
                parameters={"rebalancing_threshold": 0.05, "auto_execute": True}
            )
        ])

        # Filtrer par confiance minimale
        recommendations = [r for r in recommendations if r.confidence >= self.min_confidence_threshold]
        
        logger.info(f"üìã {len(recommendations)} recommandations g√©n√©r√©es (multi-assets)")
        return recommendations

    async def _analyze_market_conditions(self) -> MarketCondition:
        """Analyse les conditions actuelles du march√©"""
        
        # Simulation d'analyse (√† remplacer par vraies donn√©es)
        # TODO: Int√©grer avec les donn√©es r√©elles via MarketData
        
        # Calcul de volatilit√© bas√© sur les derni√®res donn√©es
        volatility = np.random.beta(2, 5)  # Simulation r√©aliste
        trend_strength = np.random.beta(3, 3)
        volume_ratio = np.random.gamma(2, 0.5)
        sentiment_score = np.random.normal(0.5, 0.2)
        news_impact = np.random.exponential(0.3)
        
        # Normalisation
        volatility = np.clip(volatility, 0, 1)
        trend_strength = np.clip(trend_strength, 0, 1)
        volume_ratio = np.clip(volume_ratio, 0.1, 3.0)
        sentiment_score = np.clip(sentiment_score, 0, 1)
        news_impact = np.clip(news_impact, 0, 1)
        
        return MarketCondition(
            volatility=volatility,
            trend_strength=trend_strength,
            volume_ratio=volume_ratio,
            sentiment_score=sentiment_score,
            news_impact=news_impact,
            timestamp=datetime.utcnow()
        )

    async def _analyze_system_status(self) -> SystemStatus:
        """Analyse l'√©tat actuel du syst√®me"""
        
        # TODO: Int√©grer avec les vraies m√©triques syst√®me
        import psutil
        
        cpu_usage = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # M√©triques simul√©es pour les autres
        active_connections = np.random.poisson(50)
        error_rate = np.random.exponential(0.01)
        response_time = np.random.gamma(2, 50)  # milliseconds
        
        return SystemStatus(
            cpu_usage=cpu_usage,
            memory_usage=memory.percent,
            disk_usage=disk.percent,
            active_connections=active_connections,
            error_rate=min(error_rate, 0.1),
            response_time=response_time
        )

    def _calculate_sync_frequency(self, market: MarketCondition, system: SystemStatus) -> int:
        """Calcule la fr√©quence optimale de synchronisation"""
        
        base_frequency = 5  # minutes
        
        # Plus fr√©quent si volatilit√© √©lev√©e
        if market.volatility > 0.7:
            base_frequency = 2
        elif market.volatility > 0.5:
            base_frequency = 3
            
        # Moins fr√©quent si syst√®me surcharg√©
        if system.cpu_usage > 80:
            base_frequency *= 2
            
        return max(base_frequency, 1)

    async def should_execute_task(self, task_type: TaskType, last_execution: Optional[datetime] = None) -> Tuple[bool, str]:
        """D√©cide si une t√¢che doit √™tre ex√©cut√©e maintenant"""
        
        if last_execution is None:
            return True, "Premi√®re ex√©cution"
            
        market_condition, system_status = await self.analyze_current_conditions()
        recommendations = await self.generate_recommendations(market_condition, system_status)
        
        # Trouve la recommandation pour ce type de t√¢che
        task_rec = next((r for r in recommendations if r.task_type == task_type), None)
        
        if not task_rec:
            return False, "Aucune recommandation pour cette t√¢che"
            
        time_since_last = datetime.utcnow() - last_execution
        required_interval = timedelta(minutes=task_rec.frequency_minutes)
        
        should_execute = time_since_last >= required_interval
        reason = f"Intervalle requis: {task_rec.frequency_minutes}min, √©coul√©: {time_since_last.total_seconds()/60:.1f}min"
        
        return should_execute, reason 