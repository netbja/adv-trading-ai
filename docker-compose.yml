# üöÄ DOCKER COMPOSE - TRADING AI ETF SYSTEM
# Version Vue3 + Backend Python FastAPI + ETF Intelligence
version: '3.8'

services:
  # üóÉÔ∏è POSTGRESQL - BASE DE DONN√âES
  postgres:
    image: postgres:15-alpine
    container_name: trading_ai_postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-trading_ai}
      - POSTGRES_USER=${POSTGRES_USER:-trader}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-TradingDB2025!}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
    networks:
      - trading_network
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER:-trader} -d ${POSTGRES_DB:-trading_ai}']
      interval: 5s
      timeout: 5s
      retries: 10

  # üî¥ REDIS - MESSAGE BROKER POUR CELERY
  redis:
    image: redis:alpine
    container_name: trading_ai_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - trading_network
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"

  # üß† BACKEND PYTHON ETF - API FASTAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading_ai_backend
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-trader}:${POSTGRES_PASSWORD:-TradingDB2025!}@postgres:5432/${POSTGRES_DB:-trading_ai}
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # AI APIs
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      
      # Broker APIs
      - ALPACA_API_KEY=${ALPACA_API_KEY:-}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY:-}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      
      # App Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      
    volumes:
      - ./logs/backend:/app/logs
      - ./data/backend:/app/data
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - trading_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üìã CELERY WORKER - T√ÇCHES ASYNCHRONES ETF
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading_ai_celery_worker
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-trader}:${POSTGRES_PASSWORD:-TradingDB2025!}@postgres:5432/${POSTGRES_DB:-trading_ai}
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - ALPACA_API_KEY=${ALPACA_API_KEY:-}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY:-}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs/celery:/app/logs
      - ./data/celery:/app/data
    networks:
      - trading_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  # ‚è∞ CELERY BEAT - PLANIFICATEUR INTELLIGENT
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading_ai_celery_beat
    command: celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-trader}:${POSTGRES_PASSWORD:-TradingDB2025!}@postgres:5432/${POSTGRES_DB:-trading_ai}
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ALPACA_API_KEY=${ALPACA_API_KEY:-}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./logs/celery-beat:/app/logs
      - ./data/celery-beat:/app/data
    networks:
      - trading_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  # üåê FRONTEND VUE3
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trading_ai_frontend
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - trading_network
    restart: unless-stopped
    depends_on:
      - backend

  # üåê NGINX - REVERSE PROXY
  nginx:
    image: nginx:alpine
    container_name: trading_ai_nginx
    ports:
      - "${HTTP_PORT:-80}:80"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - trading_network
    restart: unless-stopped

networks:
  trading_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local 