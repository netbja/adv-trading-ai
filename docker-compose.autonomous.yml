# üß† DOCKER COMPOSE - SYST√àME TRADING AUTONOME
version: '3.8'

services:
  # üß† SYST√àME AUTONOME PRINCIPAL
  autonomous_trading:
    build:
      context: .
      dockerfile: Dockerfile.autonomous
    container_name: trading_ai_autonomous
    environment:
      # Configuration Syst√®me
      - DEMO_MODE=true  # Mode simulation sans APIs payantes
      - INITIAL_CAPITAL=200
      - PORT=8000
      - LOG_LEVEL=INFO
      
      # Base de donn√©es (optionnel pour simulation)
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-trading_ai}
      - POSTGRES_USER=${POSTGRES_USER:-trader}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-TradingDB2025!}
      
      # APIs Gratuites (optionnel)
      - DEMO_API_MODE=true
      
      # Configuration Docker
      - PYTHONUNBUFFERED=1
      
    volumes:
      - ./logs/autonomous:/app/logs
      - ./data/autonomous:/app/data
      - ./backup/autonomous:/app/backup
    ports:
      - "${AUTONOMOUS_PORT:-8000}:8000"
    networks:
      - trading_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Limites m√©moire simples (compatibles)
    mem_limit: 512m
    memswap_limit: 512m

  # üóÉÔ∏è POSTGRESQL - BASE DE DONN√âES (optionnel pour stats)
  postgres:
    image: postgres:15-alpine
    container_name: trading_ai_postgres_autonomous
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-trading_ai}
      - POSTGRES_USER=${POSTGRES_USER:-trader}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-TradingDB2025!}
    volumes:
      - postgres_autonomous_data:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql
    networks:
      - trading_network
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER:-trader} -d ${POSTGRES_DB:-trading_ai}']
      interval: 5s
      timeout: 5s
      retries: 10

  # üìä GRAFANA - DASHBOARD (optionnel pour monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: trading_ai_grafana_autonomous
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD:-TradingAI2025!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana_autonomous_data:/var/lib/grafana
      - ./logs/grafana:/var/log/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - trading_network
    restart: unless-stopped
    depends_on:
      - postgres
    # Limite m√©moire simple
    mem_limit: 256m

  # üåê NGINX - REVERSE PROXY SIMPLE
  nginx:
    image: nginx:alpine
    container_name: trading_ai_nginx_autonomous
    ports:
      - "${HTTP_PORT:-80}:80"
    volumes:
      - ./configs/nginx/autonomous.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - autonomous_trading
      - grafana
    networks:
      - trading_network
    restart: unless-stopped

# üîó R√âSEAUX
networks:
  trading_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# üíæ VOLUMES
volumes:
  postgres_autonomous_data:
    driver: local
  grafana_autonomous_data:
    driver: local

# üîß CONFIGURATION VARIABLES D'ENVIRONNEMENT
# Cr√©er un fichier .env avec :
# POSTGRES_PASSWORD=TradingDB2025!
# GF_ADMIN_PASSWORD=TradingAI2025!
# AUTONOMOUS_PORT=8000
# GRAFANA_PORT=3000
# HTTP_PORT=80 