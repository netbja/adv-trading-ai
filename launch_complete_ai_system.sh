#!/bin/bash

# üöÄ LANCEUR SYST√àME IA AVANC√âE COMPLET
# ====================================

echo "üöÄ LANCEMENT DU SYST√àME IA TRADING AVANC√â"
echo "=========================================="

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleurs
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

print_step() {
    echo -e "${PURPLE}üî∏ $1${NC}"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    print_step "V√©rification des pr√©requis..."
    
    # Python
    if command -v python3 &> /dev/null; then
        print_status "Python3 trouv√©: $(python3 --version)"
    else
        print_error "Python3 non trouv√©!"
        exit 1
    fi
    
    # Pip
    if command -v pip3 &> /dev/null; then
        print_status "Pip3 trouv√©"
    else
        print_error "Pip3 non trouv√©!"
        exit 1
    fi
    
    # Docker (optionnel)
    if command -v docker &> /dev/null; then
        print_status "Docker trouv√©: $(docker --version | cut -d' ' -f3 | cut -d',' -f1)"
    else
        print_warning "Docker non trouv√© (optionnel pour certaines fonctionnalit√©s)"
    fi
}

# Installer les d√©pendances
install_dependencies() {
    print_step "Installation des d√©pendances..."
    
    # D√©pendances backend
    print_info "Installation des packages Python..."
    pip3 install -r requirements.txt 2>/dev/null || {
        print_info "Fichier requirements.txt non trouv√©, installation manuelle..."
        pip3 install fastapi uvicorn sqlalchemy psycopg2-binary celery redis aiohttp \
                     numpy pandas scipy scikit-learn asyncpg psutil docker requests
    }
    
    # D√©pendances sp√©cifiques pour l'IA avanc√©e
    print_info "Installation des packages d'IA avanc√©e..."
    pip3 install numpy pandas scipy scikit-learn matplotlib seaborn plotly dash
    
    print_status "D√©pendances install√©es"
}

# D√©marrer la base de donn√©es
setup_database() {
    print_step "Configuration de la base de donn√©es..."
    
    # V√©rifier si PostgreSQL est en cours d'ex√©cution
    if pgrep -x "postgres" > /dev/null; then
        print_status "PostgreSQL est d√©j√† en cours d'ex√©cution"
    else
        print_info "Tentative de d√©marrage de PostgreSQL..."
        
        # Essayer diff√©rentes m√©thodes selon le syst√®me
        if command -v systemctl &> /dev/null; then
            sudo systemctl start postgresql 2>/dev/null && print_status "PostgreSQL d√©marr√© via systemctl" || \
            print_warning "Impossible de d√©marrer PostgreSQL automatiquement"
        elif command -v service &> /dev/null; then
            sudo service postgresql start 2>/dev/null && print_status "PostgreSQL d√©marr√© via service" || \
            print_warning "Impossible de d√©marrer PostgreSQL automatiquement"
        else
            print_warning "PostgreSQL doit √™tre d√©marr√© manuellement"
        fi
    fi
    
    # Cr√©er la base de donn√©es si elle n'existe pas
    print_info "V√©rification de la base de donn√©es..."
    export DATABASE_URL="postgresql://trading_user:trading_pass@localhost/trading_orchestrator"
    
    # Initialiser les tables (si le script existe)
    if [ -f "backend/init_db.py" ]; then
        cd backend && python3 init_db.py && cd ..
        print_status "Base de donn√©es initialis√©e"
    else
        print_info "Script d'initialisation DB non trouv√©, cr√©ation automatique √† venir"
    fi
}

# D√©marrer Redis (pour Celery)
setup_redis() {
    print_step "Configuration de Redis..."
    
    if pgrep -x "redis-server" > /dev/null; then
        print_status "Redis est d√©j√† en cours d'ex√©cution"
    else
        print_info "Tentative de d√©marrage de Redis..."
        
        if command -v redis-server &> /dev/null; then
            redis-server --daemonize yes 2>/dev/null && print_status "Redis d√©marr√©" || \
            print_warning "Impossible de d√©marrer Redis automatiquement"
        else
            print_warning "Redis non install√© - certaines fonctionnalit√©s peuvent √™tre limit√©es"
        fi
    fi
}

# D√©marrer le backend FastAPI
start_backend() {
    print_step "D√©marrage du backend FastAPI..."
    
    cd backend
    
    # Exporter les variables d'environnement
    export DATABASE_URL="postgresql://trading_user:trading_pass@localhost/trading_orchestrator"
    export REDIS_URL="redis://localhost:6379"
    export DEBUG=true
    
    print_info "Variables d'environnement configur√©es"
    print_info "D√©marrage d'Uvicorn sur le port 8000..."
    
    # D√©marrer en arri√®re-plan
    nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload > ../backend.log 2>&1 &
    BACKEND_PID=$!
    
    echo $BACKEND_PID > ../backend.pid
    
    # Attendre que le serveur soit pr√™t
    print_info "Attente du d√©marrage du serveur..."
    sleep 5
    
    # V√©rifier si le serveur r√©pond
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        print_status "Backend FastAPI d√©marr√© avec succ√®s (PID: $BACKEND_PID)"
    else
        print_error "√âchec du d√©marrage du backend"
        cat ../backend.log
        exit 1
    fi
    
    cd ..
}

# D√©marrer les workers Celery
start_celery() {
    print_step "D√©marrage des workers Celery..."
    
    cd backend
    
    # D√©marrer le worker Celery
    print_info "D√©marrage du worker Celery..."
    nohup celery -A app.core.celery worker --loglevel=info > ../celery.log 2>&1 &
    CELERY_PID=$!
    echo $CELERY_PID > ../celery.pid
    
    # D√©marrer le scheduler Celery Beat
    print_info "D√©marrage du scheduler Celery Beat..."
    nohup celery -A app.core.celery beat --loglevel=info > ../celery-beat.log 2>&1 &
    CELERY_BEAT_PID=$!
    echo $CELERY_BEAT_PID > ../celery-beat.pid
    
    sleep 3
    print_status "Workers Celery d√©marr√©s (Worker PID: $CELERY_PID, Beat PID: $CELERY_BEAT_PID)"
    
    cd ..
}

# Lancer les tests complets
run_advanced_tests() {
    print_step "Lancement des tests IA avanc√©e..."
    
    print_info "Attente de stabilisation du syst√®me..."
    sleep 10
    
    print_info "D√©marrage des tests grandeur nature..."
    python3 test_advanced_ai_complete.py
    
    if [ $? -eq 0 ]; then
        print_status "Tests r√©ussis! Syst√®me pr√™t pour la production!"
    else
        print_warning "Certains tests ont √©chou√©, v√©rifiez les logs"
    fi
}

# Fonction de nettoyage
cleanup() {
    print_step "Nettoyage en cours..."
    
    # Arr√™ter les processus
    if [ -f backend.pid ]; then
        BACKEND_PID=$(cat backend.pid)
        kill $BACKEND_PID 2>/dev/null && print_info "Backend arr√™t√©"
        rm backend.pid
    fi
    
    if [ -f celery.pid ]; then
        CELERY_PID=$(cat celery.pid)
        kill $CELERY_PID 2>/dev/null && print_info "Celery worker arr√™t√©"
        rm celery.pid
    fi
    
    if [ -f celery-beat.pid ]; then
        CELERY_BEAT_PID=$(cat celery-beat.pid)
        kill $CELERY_BEAT_PID 2>/dev/null && print_info "Celery beat arr√™t√©"
        rm celery-beat.pid
    fi
    
    print_status "Nettoyage termin√©"
}

# Trap pour nettoyage automatique
trap cleanup EXIT INT TERM

# Menu principal
show_menu() {
    echo
    echo -e "${BLUE}üéØ MENU PRINCIPAL${NC}"
    echo "================="
    echo "1. üöÄ Lancement complet (recommand√©)"
    echo "2. üîß Installation des d√©pendances seulement"
    echo "3. ‚ö° D√©marrage backend seulement"
    echo "4. üß™ Tests IA avanc√©e seulement"
    echo "5. üìä Monitoring en temps r√©el"
    echo "6. üõë Arr√™t de tous les services"
    echo "7. ‚ùå Quitter"
    echo
    read -p "Choix (1-7): " choice
}

# Monitoring en temps r√©el
start_monitoring() {
    print_step "D√©marrage du monitoring en temps r√©el..."
    
    while true; do
        clear
        echo -e "${CYAN}üìä MONITORING SYST√àME IA AVANC√âE${NC}"
        echo "=================================="
        echo "‚è∞ $(date)"
        echo
        
        # Status API
        if curl -s http://localhost:8000/health > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ API Backend: ACTIF${NC}"
        else
            echo -e "${RED}‚ùå API Backend: INACTIF${NC}"
        fi
        
        # Status processus
        if [ -f backend.pid ] && kill -0 $(cat backend.pid) 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Backend PID: $(cat backend.pid)${NC}"
        else
            echo -e "${RED}‚ùå Backend: NON D√âMARR√â${NC}"
        fi
        
        if [ -f celery.pid ] && kill -0 $(cat celery.pid) 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Celery Worker PID: $(cat celery.pid)${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Celery Worker: NON D√âMARR√â${NC}"
        fi
        
        # M√©triques syst√®me
        echo
        echo -e "${PURPLE}üìà M√âTRIQUES SYST√àME${NC}"
        echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
        echo "RAM: $(free | grep Mem | awk '{printf("%.1f%%", $3/$2 * 100.0)}')"
        
        # Logs r√©cents
        echo
        echo -e "${BLUE}üìù LOGS R√âCENTS (derni√®res 3 lignes)${NC}"
        if [ -f backend.log ]; then
            tail -n 3 backend.log | sed 's/^/   /'
        fi
        
        echo
        echo "Appuyez sur Ctrl+C pour arr√™ter le monitoring"
        sleep 5
    done
}

# Ex√©cution du menu
main() {
    echo -e "${PURPLE}"
    cat << "EOF"
    ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
                                                              
           AI TRADING ORCHESTRATOR v2.0 - SYST√àME COMPLET
EOF
    echo -e "${NC}"
    
    while true; do
        show_menu
        
        case $choice in
            1)
                print_step "üöÄ LANCEMENT COMPLET DU SYST√àME"
                check_prerequisites
                install_dependencies
                setup_database
                setup_redis
                start_backend
                start_celery
                run_advanced_tests
                print_status "üéâ Syst√®me compl√®tement op√©rationnel!"
                ;;
            2)
                check_prerequisites
                install_dependencies
                ;;
            3)
                setup_database
                setup_redis
                start_backend
                start_celery
                ;;
            4)
                run_advanced_tests
                ;;
            5)
                start_monitoring
                ;;
            6)
                cleanup
                print_status "Tous les services arr√™t√©s"
                ;;
            7)
                print_info "Au revoir! üëã"
                exit 0
                ;;
            *)
                print_error "Option invalide"
                ;;
        esac
        
        echo
        read -p "Appuyez sur Entr√©e pour continuer..."
    done
}

# Point d'entr√©e
if [ "$1" = "--auto" ]; then
    print_step "üöÄ MODE AUTOMATIQUE - LANCEMENT COMPLET"
    check_prerequisites
    install_dependencies
    setup_database
    setup_redis
    start_backend
    start_celery
    run_advanced_tests
else
    main
fi 